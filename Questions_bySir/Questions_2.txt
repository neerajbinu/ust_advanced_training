Code 1 :
 
<!DOCTYPE html>
 
<html lang="en">
 
<head>
 
  <meta charset="UTF-8" />
 
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
 
  <title>Course Registration</title>
 
  <style>
 
    /* Add required styles here */
 
    .form-group {
 
      margin-bottom: 10px;
 
    }
 
    .error {
 
      color: red;
 
      font-size: 0.8em;
 
    }
 
    .success-message {
 
      color: green;
 
      font-weight: bold;
 
      margin-top: 10px;
 
    }
 
  </style>
 
</head>
 
<body>
 
  <!-- HTML form with elements is already created for you -->
 
  <div class="registration-form">
 
    <form id="registration-form">
 
      <div class="form-group">
 
        <label for="studentID">Student ID</label>
 
        <input type="text" id="studentID" name="studentID" class="form-control" />
 
        <div id="studentID-error" class="form-group error"></div>
 
      </div>
 
     
 
      <div class="form-group">
 
        <label for="email">Email</label>
 
        <input type="email" id="email" name="email" class="form-control" />
 
        <div id="email-error" class="form-group error"></div>
 
      </div>
 
     
 
      <div class="form-group">
 
        <label for="password">Password</label>
 
        <input type="password" id="password" name="password" class="form-control" />
 
        <div id="password-error" class="form-group error"></div>
 
      </div>
 
     
 
      <button type="submit" class="submit-button">Register</button>
 
     
 
      <div id="success-message" class="success-message" style="display: none">
 
        Welcome! Registration successful!
 
      </div>
 
    </form>
 
  </div>
 
  <!-- HTML form with elements is already created for you -->
 
 
  <script>
 
    const registrationForm = document.getElementById("registration-form");
 
    const studentID = document.getElementById("studentID");
 
    const email = document.getElementById("email");
 
    const password = document.getElementById("password");
 
    const studentIDError = document.getElementById("studentID-error");
 
    const emailError = document.getElementById("email-error");
 
    const passwordError = document.getElementById("password-error");
 
    const successMessage = document.getElementById("success-message");

 
 
    registrationForm.addEventListener("submit", function(e) {

 
      e.preventDefault();
 
      let errorForm = false;
 
 
      // Reset error messages
 
      studentIDError.textContent = "";
 
      emailError.textContent = "";
 
      passwordError.textContent = "";
 
      successMessage.style.display = "none";
 
 
      // Validate Student ID (letters and numbers only)
 
      const studentIDValue = studentID.value.trim();
 
      const studentIDRegex = /^[a-zA-Z0-9]*$/;
 
      if (!studentIDValue) {
 
        studentIDError.textContent = "Student ID is required.";
 
 
        errorForm = true;
 
      } else if (!studentIDRegex.test(studentIDValue)) {
 
        studentIDError.textContent = "Student ID can only contain letters and numbers.";
 
        errorForm = true;
 
      }
 
 
      // Validate Email
 
      const emailValue = email.value.trim();
 
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
 
      if (!emailValue) {
 
        emailError.textContent = "Email is required.";
 
        errorForm = true;
 
      } else if (!emailRegex.test(emailValue)) {
 
        emailError.textContent = "Please enter a valid email address.";
 
        errorForm = true;
 
      }
 
 
      // Validate Password (at least 8 characters, uppercase, lowercase, number, special character)
 
      const passwordValue = password.value;
 
      const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*])[A-Za-z\d!@#$%^&*]{8,}$/;
 
      if (!passwordValue) {
 
        passwordError.textContent = "Password is required.";
 
        errorForm = true;
 
      } else if (!passwordRegex.test(passwordValue)) {
 
        passwordError.textContent = "Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one number, and one special character.";
 
        errorForm = true;
 
      }
 
 
      // If all fields are valid, show success message
 
      if (!errorForm) {
 
        successMessage.style.display = "block";
 
        registrationForm.reset(); // Optional: Reset the form after successful submission
 
      }
 
    });
 
  </script>
 
</body>
 
</html>
 
 
 
 -------------------------------------------------------------------------------------------------------
 
 
Code 2 :
 
 
function factorial(n) {
 
    if (n === 0 || n === 1) return 1;
 
    let result = 1;
 
    for (let i = 2; i <= n; i++) {
 
        result *= i;
 
    }
 
    return result;
 
}
 
 
function finalSum(num) {
 
    let sum = 0;
 
    while (num >= 10) {
 
        sum = 0;
 
        while (num > 0) {
 
            sum += num % 10;
 
            num = Math.floor(num / 10);
 
        }
 
        num = sum;
 
    }
 
    return sum;
 
}
 
 
function isSpecialNumber(num, digitSet) {
 
    while (num > 0) {
 
        let digit = num % 10;
 
        if (!digitSet.has(digit)) {
 
            return false;
 
        }
 
        num = Math.floor(num / 10);
 
    }
 
    return true;
 
}
 
 
function factorialSum(array_length, arr) {
 
    let specialCount = 0;
 
 
    for (let num of arr) {
 
        // Step 1: Calculate final sum
 
        let finalSumValue = finalSum(num);
 
        
 
        // Step 2: Calculate factorial sum
 
        let factorialSumValue = factorial(finalSumValue);
 
        
 
        // Step 3: Create a set of digits in factorialSum
 
        let digitSet = new Set();
 
        let temp = factorialSumValue;
 
        while (temp > 0) {
 
            digitSet.add(temp % 10);
 
            temp = Math.floor(temp / 10);
 
        }
 
        
 
        // Step 4: Check if num is a special number
 
        if (isSpecialNumber(num, digitSet)) {
 
            specialCount++;
 
        }
 
    }
 
 
    return specialCount;
 
}
 
 
// Example usage with input handling
 
function main() {
 
    const input = require('fs').readFileSync('/dev/stdin', 'utf8');
 
    const lines = input.trim().split('\n');
 
    
 
    const array_length = parseInt(lines[0].trim());
 
    let arr = [];
 
    for (let j = 1; j <= array_length; j++) {
 
        arr.push(parseInt(lines[j].trim()));
 
    }
 
    
 
    const result = factorialSum(array_length, arr);
 
    console.log(result);
 
}
 
 
main();
 
 --------------------------------------------------------------------------------------------------------
 
code 4:
this.salesData$ = this.reportsService.getSalesData();
this.totalSales$ = this.reportsService.calculateTotalSales(this.salesData$);
this.totalCashSale$ = this.reportsService.calculateTotalCashSale(this.salesData$);
this.totalCreditSale$ = this.reportsService.calculateTotalCreditSales(this.salesData$);
this.mostSaleBuyers$ = this.reportsService.calculateBuyerWithMostSale(this.salesData$);
getSalesData(..){
return of(salesData).pipe(map((data:any)=>data.sales));
}

calculateTotalSales(.....){
return salesData.pipe(map((sales)=> sales.reduce((total,sale)=> total+ sale.saleTotal, 0)));
}
calculateTotalCashSale(...){
return salesData.pepe(
map((sales)=> sales.filter((sale) => !sale.creditCard).reduce((total, sale) => total+ sale.saleTotal, 0)
)
);
}
calculateTotalCreditCardSales(...){
return salesData.pipe(
map((sales)=> sales.creditCard).reduce((total,sale)=>total+sale.saleTotal, 0)
)
);
}
calculateBuyerWithMostSale(....){
return sales.Data.pipe(
map((sales) => sales.reduce(mostSales, sale)=> sale.saleTotal>mostSales.saleTotal? sale:mostSales,
{buyerName:'',saleTotal:0}
)
)
);
}
}
 
 
code 5:
 
getPlayer(id: number)
{
	let player = this.players.find(pl=>pl.id===id);
	return player;
}
addPlayer(player: Player)
{
	this.players.push(player);
	this.playersChanged.next(this.getPlayers());
}
updatePlayer(index: number, newPlayer: Player)
{
	newPlayer.description='Bolwer';
	this.palyers[index-1]=newPlayer;
	this.playerChanged.next(this.getPlayers());
}
deletePlayer(index: number)
{
	this.players.splice(index,1);
	this.playersChanged.next(this.getPlayers());
}
//Team
editPlayer(id: number,nwPlayer: Player)
{
	const index = this.team.find(pl=>pl.id===id);
	this.team[index]= nwPlayer;
}
addPlayer(player: Player)
{
	const playerExist= this.team.find(p=>p.id===player.id);
	if(playerExist)
	{
		alert("This player already exist in your team !!");
	} else{
		this.team.push(player);
	}
}
deletePlayer(id: number)
{
	this.team = this.team.filter(pl=>pl.id !==id);
}
getStatus()
{
	var status: string[]=[];
	const noofBatsmen=this.getTeam().filter(p=> p.description ==='Batsman').length;
	const noofBowlers=this.getTeam().filter(p=> p.description ==='Bowler').length;
	const noofWicketKeepers=this.getTeam().filter(p=> p.description ==='Wicket Keeper').length;
	if(noofBatsmen !==2)
	{
		status.push("You do not have the required number of batsmen in your team");
	}
	if(noofBowlers !==2)
	{
		status.push("You do not have the required number of bowler in your team");
	}
	if(noofWicketKeepers !==1)
	{
		status.push("You do not have the required number of wicket-keeper in your team");
	}
	return status;
}
----------------------------------------------------------------------------------------------------
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <title>Course Registration</title>
  <style>
    /* Add required styles here */
    .form-group {
      margin-bottom: 10px;
    }
    .error {
      color: red;
      font-size: 0.8em;
    }
    .success-message {
      color: green;
      font-weight: bold;
      margin-top: 10px;
    }
  </style>
</head>
<body>
  <!-- HTML form with elements is already created for you -->
  <div class="registration-form">
    <form id="registration-form">
      <div class="form-group">
        <label for="studentID">Student ID</label>
        <input type="text" id="studentID" name="studentID" class="form-control" />
        <div id="studentID-error" class="form-group error"></div>
      </div>
     
      <div class="form-group">
        <label for="email">Email</label>
        <input type="email" id="email" name="email" class="form-control" />
        <div id="email-error" class="form-group error"></div>
      </div>
     
      <div class="form-group">
        <label for="password">Password</label>
        <input type="password" id="password" name="password" class="form-control" />
        <div id="password-error" class="form-group error"></div>
      </div>
     
      <button type="submit" class="submit-button">Register</button>
     
      <div id="success-message" class="success-message" style="display: none">
        Welcome! Registration successful!
      </div>
    </form>
  </div>
  <!-- HTML form with elements is already created for you -->
 
  <script>
    const registrationForm = document.getElementById("registration-form");
    const studentID = document.getElementById("studentID");
    const email = document.getElementById("email");
    const password = document.getElementById("password");
    const studentIDError = document.getElementById("studentID-error");
    const emailError = document.getElementById("email-error");
    const passwordError = document.getElementById("password-error");
    const successMessage = document.getElementById("success-message");
 
    registrationForm.addEventListener("submit", function(e) {
      e.preventDefault();
      let errorForm = false;
 
      // Reset error messages
      studentIDError.textContent = "";
      emailError.textContent = "";
      passwordError.textContent = "";
      successMessage.style.display = "none";
 
      // Validate Student ID (letters and numbers only)
      const studentIDValue = studentID.value.trim();
      const studentIDRegex = /^[a-zA-Z0-9]*$/;
      if (!studentIDValue) {
        studentIDError.textContent = "Student ID is required.";
        errorForm = true;
      } else if (!studentIDRegex.test(studentIDValue)) {
        studentIDError.textContent = "Student ID can only contain letters and numbers.";
        errorForm = true;
      }
 
      // Validate Email
      const emailValue = email.value.trim();
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailValue) {
        emailError.textContent = "Email is required.";
        errorForm = true;
      } else if (!emailRegex.test(emailValue)) {
        emailError.textContent = "Please enter a valid email address.";
        errorForm = true;
      }
 
      // Validate Password (at least 8 characters, uppercase, lowercase, number, special character)
      const passwordValue = password.value;
      const passwordRegex = /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[!@#$%^&*])[A-Za-z\d!@#$%^&*]{8,}$/;
      if (!passwordValue) {
        passwordError.textContent = "Password is required.";
        errorForm = true;
      } else if (!passwordRegex.test(passwordValue)) {
        passwordError.textContent = "Password must be at least 8 characters long and contain at least one uppercase letter, one lowercase letter, one number, and one special character.";
        errorForm = true;
      }
 
      // If all fields are valid, show success message
      if (!errorForm) {
        successMessage.style.display = "block";
        registrationForm.reset(); // Optional: Reset the form after successful submission
      }
    });
  </script>
</body>
</html>
 
----------------------------------------------------------------------------------------------------------
//Player
getPlayer(id: number)
{
	let player = this.players.find(pl=>pl.id===id);
	return player;
}
addPlayer(player: Player)
{
	this.players.push(player);
	this.playersChanged.next(this.getPlayers());
}
updatePlayer(index: number, newPlayer: Player)
{
	newPlayer.description='Bolwer';
	this.palyers[index-1]=newPlayer;
	this.playerChanged.next(this.getPlayers());
}
deletePlayer(index: number)
{
	this.players.splice(index,1);
	this.playersChanged.next(this.getPlayers());
}
//Team
editPlayer(id: number,nwPlayer: Player)
{
	const index = this.team.find(pl=>pl.id===id);
	this.team[index]= nwPlayer;
}
addPlayer(player: Player)
{
	const playerExist= this.team.find(p=>p.id===player.id);
	if(playerExist)
	{
		alert("This player already exist in your team !!");
	} else{
		this.team.push(player);
	}
}
deletePlayer(id: number)
{
	this.team = this.team.filter(pl=>pl.id !==id);
}
getStatus()
{
	var status: string[]=[];
	const noofBatsmen=this.getTeam().filter(p=> p.description ==='Batsman').length;
	const noofBowlers=this.getTeam().filter(p=> p.description ==='Bowler').length;
	const noofWicketKeepers=this.getTeam().filter(p=> p.description ==='Wicket Keeper').length;
	if(noofBatsmen !==2)
	{
		status.push("You do not have the required number of batsmen in your team");
	}
	if(noofBowlers !==2)
	{
		status.push("You do not have the required number of bowler in your team");
	}
	if(noofWicketKeepers !==1)
	{
		status.push("You do not have the required number of wicket-keeper in your team");
	}
	return status;
}